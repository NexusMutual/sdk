name: release-next

on:
  push:
    branches:
      - dev

env:
  NODE_VERSION: '18'
  PROVIDER_URL: https://eth-mainnet.g.alchemy.com/v2/${{ secrets.ALCHEMY_API_KEY }}

jobs:
  version:
    runs-on: ubuntu-22.04
    outputs:
      local_version: ${{ steps.local_version.outputs.value }}
      rc_version: ${{ steps.rc_version.outputs.value }}
    steps:
      - name: GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Get local version
        id: local_version
        run: |
          version=$(cat ./package.json | jq --raw-output .version)
          echo $version
          echo "value=$version" >> $GITHUB_OUTPUT

      - name: Determine RC version
        id: rc_version
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
        run: |
          package_name="$(cat ./package.json | jq --raw-output .name)"
          base_version="$(cat ./package.json | jq --raw-output .version)"
          echo "Base version: $base_version"
          
          # Find the latest RC version for this base version
          latest_rc=$(npm view $package_name versions --json 2>/dev/null | jq -r '.[]' 2>/dev/null | grep "^$base_version-rc[0-9]\+$" | sort -V | tail -n 1 || echo "")
          
          if [ -z "$latest_rc" ]; then
            # No previous RC version found, start with rc1
            rc_version="${base_version}-rc1"
          else
            # Extract RC number and increment it
            rc_num=$(echo $latest_rc | sed -E "s/${base_version}-rc([0-9]+)/\1/")
            next_rc=$((rc_num + 1))
            rc_version="${base_version}-rc${next_rc}"
          fi
          
          echo "RC version: $rc_version"
          echo "value=$rc_version" >> $GITHUB_OUTPUT

  build:
    runs-on: ubuntu-22.04
    needs: [version]
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - uses: actions/cache@v3
        id: cache
        with:
          path: node_modules
          key: node-modules-cache-node-${{ env.NODE_VERSION }}-${{ runner.os }}-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci --ignore-scripts

      - name: Build package
        run: npm run build

      - name: Run linter
        run: npm run lint

      - name: Run prettier
        run: npm run format

      - name: Check types and typescript
        run: npm run ts:check

      - name: Run tests
        run: npm run test

      - uses: actions/upload-artifact@v4
        with:
          name: sdk-next-${{ needs.version.outputs.rc_version }}
          path: dist

  publish:
    runs-on: ubuntu-22.04
    needs: [version, build]
    environment: production
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - uses: actions/download-artifact@v4
        with:
          name: sdk-next-${{ needs.version.outputs.rc_version }}
          path: dist

      - name: Remove prepare script
        run: npm pkg delete scripts.prepare

      - name: Update package.json version
        run: |
          npm version ${{ needs.version.outputs.rc_version }} --no-git-tag-version

      - name: Publish with next tag
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
        run: npm publish --tag next --access public --ignore-scripts
